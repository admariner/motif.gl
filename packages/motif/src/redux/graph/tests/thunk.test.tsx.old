// @ts-nocheck
import React from 'react';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';
import cloneDeep from 'lodash/cloneDeep';
import flatten from 'lodash/flatten';
import { render } from '@testing-library/react';
import { ToasterContainer } from 'baseui/toast';
import {
  computeEdgeSelection,
  groupEdgesWithAggregation,
  importEdgeListData,
  importJsonData,
  importNodeEdgeData,
  importSampleData,
} from '../thunk';
import {
  initialState,
  addQuery,
  processGraphResponse,
  updateStyleOption,
  overwriteEdgeSelection,
  updateLastGroupEdgeIds,
} from '../slice';
import {
  importJson,
  importNodeEdgeCsv,
  importEdgeListCsv,
} from '../processors/import';
import { fetchBegin, fetchDone, updateToast, closeModal } from '../../ui/slice';
import {
  GraphWithGroupEdge,
  SimpleEdge,
  SimpleGraphWithGroupEdge,
} from '../../../constants/sample-data';
import { RootState } from '../../investigate';
import {
  Accessors,
  Field,
  GraphData,
  GraphList,
  ImportFormat,
  JsonImport,
  Selection,
  TLoadFormat,
} from '../types';
import * as LAYOUT from '../../../constants/layout-options';
import { DEFAULT_NODE_STYLE } from '../../../constants/graph-shapes';
import {
  groupEdgesForImportation,
  groupEdgesWithConfiguration,
} from '../processors/group-edges';
import { getGraph } from '../selectors';
import { resetState } from '../../import/fileUpload/slice';
import { TFileContent } from '../../import/fileUpload';
import { numericAccessorsNodeEdge, whitespaceNodeEdge } from './constant';

const mockStore = configureStore([thunk]);
const getStore = (): RootState => {
  const graphState = cloneDeep(initialState);
  const store = {
    investigate: {
      ui: {},
      widget: {},
      graph: {
        present: graphState,
      },
    },
  };
  return store;
};

describe('thunk.test.js', () => {
  beforeEach(() => {
    render(<ToasterContainer />);
  });

  describe('importNodeEdgeData', () => {
    const sampleNodeEdgeData = {
      edgeCsv: [
        {
          fileName: 'test-1.csv',
          content:
            'id,relation,source,target\ntxn1,hello,a,b\ntxn2,works,b,c\ntxn3,abc,c,a',
        },
      ],
      nodeCsv: [
        {
          fileName: 'test-2.csv',
          content: 'id,value,score\na,20,80\nb,40,100\nc,60,123',
        },
      ],
    };

    it('should receive nodeCsv and edgeCsv as array and process graph responses accurately', async (done) => {
      const store = mockStore(getStore());
      const { nodeCsv, edgeCsv } = sampleNodeEdgeData;
      const { accessors } = initialState;
      const metadataKey = '123';
      const groupEdgeToggle = false;

      const nodeCsvs: string[] = nodeCsv.map(
        (nodeCsv: TFileContent) => nodeCsv.content as string,
      );
      const edgeCsvs: string[] = edgeCsv.map(
        (edgeCsv: TFileContent) => edgeCsv.content as string,
      );

      const data = await importNodeEdgeCsv(
        nodeCsvs,
        edgeCsvs,
        accessors,
        groupEdgeToggle,
        metadataKey,
      );

      // group edge configurations
      const groupEdgeConfig = {
        toggle: groupEdgeToggle,
        availability: false,
      };
      Object.assign(data.metadata.groupEdges, groupEdgeConfig);

      const expectedActions = [
        fetchBegin(),
        addQuery(data),
        processGraphResponse({
          data,
          accessors,
        }),
        updateToast('toast-0'),
        resetState(),
        fetchDone(),
        closeModal(),
      ];

      return store
        .dispatch(
          importNodeEdgeData(
            sampleNodeEdgeData,
            groupEdgeToggle,
            accessors,
            metadataKey,
          ),
        )
        .then(() => {
          setTimeout(() => {
            expect(store.getActions()).toEqual(expectedActions);
            done();
          }, 300);
        });
    });

    it('should import source and target with whitespace successfully', async (done) => {
      const store = mockStore(getStore());
      const { nodeCsv, edgeCsv } = whitespaceNodeEdge;
      const { accessors } = initialState;
      const metadataKey = '123';
      const groupEdgeToggle = false;

      const nodeCsvs: string[] = nodeCsv.map(
        (nodeCsv: TFileContent) => nodeCsv.content as string,
      );
      const edgeCsvs: string[] = edgeCsv.map(
        (edgeCsv: TFileContent) => edgeCsv.content as string,
      );

      const data = await importNodeEdgeCsv(
        nodeCsvs,
        edgeCsvs,
        accessors,
        groupEdgeToggle,
        metadataKey,
      );

      // group edge configurations
      const groupEdgeConfig = { toggle: groupEdgeToggle, availability: false };
      Object.assign(data.metadata.groupEdges, groupEdgeConfig);

      const expectedActions = [
        fetchBegin(),
        addQuery(data),
        processGraphResponse({
          data,
          accessors,
        }),
        updateToast('toast-0'),
        resetState(),
        fetchDone(),
        closeModal(),
      ];

      return store
        .dispatch(
          importNodeEdgeData(
            whitespaceNodeEdge,
            groupEdgeToggle,
            accessors,
            metadataKey,
          ),
        )
        .then(() => {
          setTimeout(() => {
            expect(store.getActions()).toEqual(expectedActions);
            done();
          }, 300);
        });
    });

    it('should process numeric custom nodeID, edgeSource and edgeTarget successfully', async (done) => {
      const store = mockStore(getStore());
      const { nodeCsv, edgeCsv } = numericAccessorsNodeEdge;
      const accessors = {
        nodeID: 'custom_id',
        edgeID: 'id',
        edgeSource: 'numeric_source',
        edgeTarget: 'numeric_target',
      };

      const metadataKey = '123';
      const groupEdgeToggle = false;

      const nodeCsvs: string[] = nodeCsv.map(
        (nodeCsv: TFileContent) => nodeCsv.content as string,
      );
      const edgeCsvs: string[] = edgeCsv.map(
        (edgeCsv: TFileContent) => edgeCsv.content as string,
      );

      const data = await importNodeEdgeCsv(
        nodeCsvs,
        edgeCsvs,
        accessors,
        groupEdgeToggle,
        metadataKey,
      );

      // group edge configurations
      const groupEdgeConfig = { toggle: groupEdgeToggle, availability: true };
      Object.assign(data.metadata.groupEdges, groupEdgeConfig);

      const expectedActions = [
        fetchBegin(),
        addQuery(data),
        processGraphResponse({
          data,
          accessors,
        }),
        updateToast('toast-0'),
        resetState(),
        fetchDone(),
        closeModal(),
      ];

      return store
        .dispatch(
          importNodeEdgeData(
            numericAccessorsNodeEdge,
            groupEdgeToggle,
            accessors,
            metadataKey,
          ),
        )
        .then(() => {
          setTimeout(() => {
            expect(store.getActions()).toEqual(expectedActions);
            done();
          }, 300);
        });
    });

    it('should throw errors if importNodeEdgeData parameter is array', async () => {
      const importDataArr = [sampleNodeEdgeData];
      await expect(importNodeEdgeData(importDataArr)).toThrow(Error);
    });

    it('should throw errors if source and target fields are invalid', async () => {
      const invalidNodeEdgeData = {
        data: {
          edgeData:
            'id,relation,from,to\ntxn1,hello,a,b\ntxn2,works,b,c\ntxn3,abc,c,a',
          nodeData: 'id,value,score\na,20,80\nb,40,100\nc,60,123',
          metadata: {
            key: 123,
          },
        },
        type: 'nodeEdgeCsv',
      };
      await expect(importNodeEdgeData(invalidNodeEdgeData)).toThrow(Error);
    });
  });

  describe('importEdgeListData', () => {
    const firstEdgeListCsv =
      'id,relation,source,target\ntxn1,works,jason,cylynx\ntxn3,abc,cylynx,timothy\ntxn4,says hi to,swan,cylynx';

    const secondEdgeListCsv = 'id,source,target\n123,x,y\n456,y,z\n789,z,x';

    const quotesHeaderCsv =
      '"id","relation","source","target"\ntxn1,works,jason,cylynx\ntxn3,abc,cylynx,timothy\ntxn4,says hi to,swan,cylynx';

    it('should import header with quotes successfully', async (done) => {
      const store = mockStore(getStore());
      const importDataArr = [quotesHeaderCsv];
      const groupEdgeToggle = false;

      // processes
      const batchDataPromises = importDataArr.map((graphData) => {
        return importEdgeListCsv(
          graphData,
          initialState.accessors,
          groupEdgeToggle,
        );
      });

      const graphDataArr = await Promise.all(batchDataPromises);
      const [graphData] = graphDataArr;

      const groupEdgeConfig = { toggle: groupEdgeToggle, availability: false };
      Object.assign(graphData.metadata.groupEdges, groupEdgeConfig);

      const expectedActions = [
        fetchBegin(),
        addQuery(graphData),
        processGraphResponse({
          data: graphData,
          accessors: initialState.accessors,
        }),
        updateToast('toast-0'),
        resetState(),
        fetchDone(),
        closeModal(),
      ];

      // assertions
      return store
        .dispatch(
          importEdgeListData(
            importDataArr,
            groupEdgeToggle,
            initialState.accessors,
          ),
        )
        .then(() => {
          setTimeout(() => {
            expect(store.getActions()).toEqual(expectedActions);
            done();
          }, 300);
        });
    });

    it('should receive importData as array and process graph responses accurately', async (done) => {
      const store = mockStore(getStore());

      // input
      const importDataArr = [firstEdgeListCsv, secondEdgeListCsv];
      const groupEdgeToggle = false;

      // processes
      const batchDataPromises = importDataArr.map((graphData) => {
        return importEdgeListCsv(
          graphData,
          initialState.accessors,
          groupEdgeToggle,
        );
      });

      const graphDataArr = await Promise.all(batchDataPromises);
      const [firstGraphData, secondGraphData] = graphDataArr;

      // group edge configurations
      const groupEdgeConfig = { toggle: groupEdgeToggle, availability: false };
      Object.assign(firstGraphData.metadata.groupEdges, groupEdgeConfig);
      Object.assign(secondGraphData.metadata.groupEdges, groupEdgeConfig);

      // expected results
      const expectedActions = [
        fetchBegin(),
        addQuery(firstGraphData),
        processGraphResponse({
          data: firstGraphData,
          accessors: initialState.accessors,
        }),
        addQuery(secondGraphData),
        processGraphResponse({
          data: secondGraphData,
          accessors: initialState.accessors,
        }),
        updateToast('toast-0'),
        resetState(),
        fetchDone(),
        closeModal(),
      ];

      // assertions
      return store
        .dispatch(
          importEdgeListData(
            importDataArr,
            groupEdgeToggle,
            initialState.accessors,
          ),
        )
        .then(() => {
          setTimeout(() => {
            expect(store.getActions()).toEqual(expectedActions);
            done();
          }, 300);
        });
    });

    it('should throw errors if importData parameter is not array', async () => {
      await expect(importEdgeListData(firstEdgeListCsv)).toThrow(Error);
    });

    it('should throw errors if source and target fields are invalid', async () => {
      const firstErrorEdgeCsv =
        'id,relation,from,to\ntxn1,works,jason,cylynx\ntxn3,abc,cylynx,timothy\ntxn4,says hi to,swan,cylynx';

      const secondValidEdgeCsv = 'id,source,target\n123,x,y\n456,y,z\n789,z,x';
      await expect(
        importEdgeListData([firstErrorEdgeCsv, secondValidEdgeCsv]),
      ).toThrow(Error);
    });

    describe('importSampleData', () => {
      const store = mockStore(getStore());

      it('should receive importData as object and process graph accurately', async (done) => {
        // input
        const data = SimpleEdge();
        const groupEdgeToggle = false;

        // processes
        const processedJsonData = await importJson(
          data,
          initialState.accessors,
          groupEdgeToggle,
        );
        const [objectData] = processedJsonData;

        // group edge configurations
        const groupEdgeConfig = {
          toggle: groupEdgeToggle,
          availability: false,
        };
        objectData.metadata.groupEdges = groupEdgeConfig;

        // expected results
        const expectedActions = [
          fetchBegin(),
          addQuery(objectData),
          processGraphResponse({
            data: objectData,
            accessors: initialState.accessors,
          }),
          updateToast('toast-0'),
          resetState(),
          fetchDone(),
          closeModal(),
        ];

        return store
          .dispatch(importSampleData(data, groupEdgeToggle))
          .then(() => {
            setTimeout(() => {
              expect(store.getActions()).toEqual(expectedActions);
              done();
            }, 300);
          });
      });
    });

    describe('computeEdgeSelection', () => {
      const simpleGraphWithGroupEdge = SimpleGraphWithGroupEdge();
      const aggregatedEdgeFields: Field[] = [
        {
          name: 'id',
          format: '',
          type: 'string',
          analyzerType: 'string',
        },
        {
          name: 'source',
          format: '',
          type: 'string',
          analyzerType: 'string',
        },
        {
          name: 'target',
          format: '',
          type: 'string',
          analyzerType: 'string',
        },
        {
          name: 'numeric',
          format: '',
          type: 'integer',
          analyzerType: 'INT',
        },
        {
          name: 'value',
          format: '',
          type: 'string',
          analyzerType: 'STRING',
        },
        {
          name: 'date',
          format: '',
          type: 'string',
          analyzerType: 'STRING',
        },

        {
          analyzerType: 'INT',
          format: '',
          name: 'min numeric',
          type: 'integer',
        },
        {
          analyzerType: 'INT',
          format: '',
          name: 'max numeric',
          type: 'integer',
        },
        {
          analyzerType: 'INT',
          format: '',
          name: 'average numeric',
          type: 'integer',
        },
        {
          analyzerType: 'INT',
          format: '',
          name: 'count numeric',
          type: 'integer',
        },
        {
          analyzerType: 'INT',
          format: '',
          name: 'sum numeric',
          type: 'integer',
        },
        {
          analyzerType: 'STRING',
          format: '',
          name: 'first value',
          type: 'string',
        },
        {
          analyzerType: 'STRING',
          format: '',
          name: 'last value',
          type: 'string',
        },
        {
          analyzerType: 'STRING',
          format: '',
          name: 'most_frequent value',
          type: 'string',
        },
        {
          analyzerType: 'STRING',
          format: '',
          name: 'first date',
          type: 'string',
        },
        {
          analyzerType: 'STRING',
          format: '',
          name: 'last date',
          type: 'string',
        },
        {
          analyzerType: 'STRING',
          format: '',
          name: 'most_frequent date',
          type: 'string',
        },
      ];

      Object.assign(simpleGraphWithGroupEdge.metadata.fields, {
        edges: aggregatedEdgeFields,
      });

      const importedGraphState = (): RootState => {
        const store = {
          investigate: {
            ui: {},
            widget: {},
            graph: {
              present: {
                graphFlatten: simpleGraphWithGroupEdge,
                edgeSelection: [
                  {
                    label: 'id',
                    id: 'id',
                    type: 'string',
                    selected: true,
                  },
                  {
                    label: 'source',
                    id: 'source',
                    type: 'string',
                    selected: true,
                  },
                  {
                    label: 'target',
                    id: 'target',
                    type: 'string',
                    selected: true,
                  },
                ],
              },
            },
          },
        };
        return store;
      };

      const store = mockStore(importedGraphState());

      beforeEach(() => {
        store.dispatch(computeEdgeSelection());
      });

      afterEach(() => {
        store.clearActions();
      });

      it('should append edge selection based on edge fields', () => {
        const { edgeSelection, graphFlatten } = getGraph(store.getState());
        const { edges: edgeFields } = graphFlatten.metadata.fields;

        const computedEdgeSelection = edgeFields.map((edgeField: Field) => {
          const { name, type } = edgeField;
          const existingSelection = edgeSelection.find(
            (selection: Selection) => selection.id === edgeField.name,
          );
          const isSelected: boolean = existingSelection?.selected ?? false;

          return {
            id: name,
            label: name,
            type,
            selected: isSelected,
          };
        });

        const expectedActions = [overwriteEdgeSelection(computedEdgeSelection)];

        expect(store.getActions()).toEqual(expectedActions);
      });
    });
  });
});
